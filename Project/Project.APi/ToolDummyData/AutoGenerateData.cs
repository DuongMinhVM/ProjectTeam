using EntityLayer;
using EntityService.Services;
using EntityService.ViewModels;
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Reflection;
using System.Threading.Tasks;

namespace Project.APi.ToolDummyData
{
    public sealed class StringValue : Attribute
    {
        public string Value { get; private set; }

        public StringValue(string value)
        {
            Value = value;
        }
    }

    public static class ExtensionMethods
    {
        public static string GetStringValue(this Enum value)
        {
            string stringValue = value.ToString();
            Type type = value.GetType();
            FieldInfo fieldInfo = type.GetField(value.ToString());
            StringValue[] attrs = fieldInfo.
                GetCustomAttributes(typeof(StringValue), false) as StringValue[];
            if (attrs.Length > 0)
            {
                stringValue = attrs[0].Value;
            }
            return stringValue;
        }
    }

    public enum Status
    {
        [StringValue("Actived")]
        Actived,

        [StringValue("Open")]
        Open,

        [StringValue("Pending")]
        Pending,

        [StringValue("Closed")]
        Closed
    }

    public enum Gender
    {
        [StringValue("Female")]
        Female,

        [StringValue("Male")]
        Male
    }

    public class AutoGenerateData
    {
        private DbContext db;

        public AutoGenerateData(DbContext _db)
        {
            db = _db;
        }

        public List<Guid> GennerateCategory()
        {
            db.Database.ExecuteSqlCommand("delete from CategoryEntities");
            string[] cate = new string[] { "Skirt", "T-Shirt", "Clothing", "Women", "Men", "Big-Size", "Small-Size", "Sport", "Baby" };
            List<Guid> lCategory = new List<Guid>();
            for (int i = 0; i < cate.Length; i++)
            {
                CategoryEntity item = new CategoryEntity { CategoryName = cate[i], Id = Guid.NewGuid(), CreateDate = DateTime.Now };
                db.Set<CategoryEntity>().Add(item);
                lCategory.Add(item.Id);
            }
            return lCategory;
        }

        public void ClearCountry()
        {
            db.Database.ExecuteSqlCommand("delete from CountryEntities");
        }

        public void GennerateCountry()
        {
            Bogus.Faker<CountryEntity> country = new Bogus.Faker<CountryEntity>()
                .StrictMode(true)
                .RuleFor(id => id.Id, f => Guid.NewGuid())
                .RuleFor(zipcode => zipcode.ZipCode, f => f.Address.ZipCode())
                .RuleFor(city => city.City, f => f.Address.City())
                .RuleFor(streetadd => streetadd.StreetAddress, f => f.Address.StreetAddress())
                .RuleFor(citypre => citypre.CityPrefix, f => f.Address.CityPrefix())
                .RuleFor(citysuf => citysuf.CitySuffix, f => f.Address.CitySuffix())
                .RuleFor(strname => strname.StreetName, f => f.Address.StreetName())
                .RuleFor(building => building.BuildingNumber, f => f.Address.BuildingNumber())
                .RuleFor(strsuffix => strsuffix.StreetSuffix, f => f.Address.StreetSuffix())
                .RuleFor(ct => ct.Country, f => f.Address.Country())
                .RuleFor(fulladd => fulladd.FullAddress, f => f.Address.FullAddress())
                .RuleFor(code => code.CountryCode, f => f.Address.CountryCode())
                .RuleFor(state => state.State, f => f.Address.State())
                .RuleFor(stateAbb => stateAbb.StateAbbreviation, f => f.Address.StateAbbr())
                .RuleFor(latitube => latitube.Latitude, f => f.Address.Latitude().ToString())
                .RuleFor(longitube => longitube.Longitude, f => f.Address.Longitude().ToString())
                .RuleFor(dir => dir.Direction, f => f.Address.Direction())
                .RuleFor(card => card.CardinalDirection, f => f.Address.CardinalDirection())
                .RuleFor(ord => ord.OrdinalDirection, f => f.Address.OrdinalDirection())
                .RuleFor(date => date.CreateDate, f => DateTime.Now);
            CountryEntity result = country.Generate();
            db.Set<CountryEntity>().Add(result);
        }

        public void GennerateProduct(List<Guid> guids)
        {
            string[] size = new string[] { "S", "M", "L", "XL", "XXL", "XXXL" };
            Bogus.Faker<ProductEntity> product = new Bogus.Faker<ProductEntity>()
                   .StrictMode(true)
                   .RuleFor(id => id.Id, f => Guid.NewGuid())
                   .RuleFor(date => date.CreateDate, f => DateTime.Now)
                   .RuleFor(name => name.ProductName, f => f.Commerce.ProductName())
                   .RuleFor(price => price.Price, f => f.Commerce.Price())
                   .RuleFor(color => color.Color, f => f.Commerce.Color())
                   .RuleFor(e8 => e8.Ean8, f => f.Commerce.Ean8())
                   .RuleFor(e13 => e13.Ean13, f => f.Commerce.Ean13())
                   .RuleFor(status => status.Status, f => f.PickRandom<Status>().GetStringValue())
                   .RuleFor(quantity => quantity.Quantity, f => f.Random.Int(0))
                   .RuleFor(fashion => fashion.Fashion, f => f.Image.Fashion())
                   .RuleFor(des => des.Description, f => f.Lorem.Text() + f.Database.Column() + f.Lorem.Text())
                   .RuleFor(si => si.Size, f => f.PickRandom(size))
                   .RuleFor(ct => ct.Categories, f => f.PickRandom(guids))
                   .RuleFor(dp => dp.Department, f => f.Commerce.Department());
            ProductEntity result = product.Generate();
            db.Set<ProductEntity>().Add(result);
        }

        public void ClearProduct()
        {
            db.Database.ExecuteSqlCommand("delete from ProductEntities");
        }

        public async Task<List<Guid>> GetAllIdCountry()
        {
            List<CountryEntity> result = await db.Set<CountryEntity>().ToListAsync();
            List<Guid> guids = new List<Guid>();
            for (int i = 0; i < result.Count; i++)
            {
                guids.Add(result[i].Id);
            }
            return guids;
        }

        public async Task GennerateUser(List<Guid> countryEntities)
        {
            Bogus.Faker<UserViewModel> User = new Bogus.Faker<UserViewModel>()
                .StrictMode(true)
                .RuleFor(first => first.FirstName, f => f.Name.FirstName())
                .RuleFor(last => last.LastName, f => f.Name.LastName())
                .RuleFor(full => full.FulllName, f => f.Name.FullName())
                .RuleFor(avatar => avatar.Avatar, f => f.Internet.Avatar())
                .RuleFor(gender => gender.Gender, f => f.PickRandom<Gender>().GetStringValue())
                .RuleFor(date => date.DateOfBirth, f => f.Date.Soon())
                .RuleFor(ct => ct.CountryId, f => f.PickRandom(countryEntities))
                .RuleFor(pass => pass.Password, f => f.Internet.Password())
                .RuleFor(username => username.UserName, f => f.Internet.UserName())
                .RuleFor(t => t.Id, f => f.Internet.UserName())
                .RuleFor(t => t.TwoFactorEnabled, f => true)
                .RuleFor(t => t.SecurityStamp, f => f.Internet.Mac())
                .RuleFor(t => t.Roles, f => null)
                .RuleFor(t => t.PhoneNumberConfirmed, f => true)
                .RuleFor(t => t.PhoneNumber, f => f.Phone.PhoneNumber())
                .RuleFor(t => t.PasswordHash, f => f.Internet.Password())
                .RuleFor(t => t.Logins, f => null)
                .RuleFor(t => t.LockoutEndDateUtc, f => DateTime.Now)
                .RuleFor(t => t.LockoutEnabled, f => true)
                .RuleFor(t => t.EmailConfirmed, f => true)
                .RuleFor(t => t.Email, f => f.Internet.Email())
                .RuleFor(t => t.AccessFailedCount, f => f.Random.Int());
            UserService userService = new UserService();
            await userService.RegisterAccountUser(User.Generate());
        }

        public async Task<int> SaveChangeAsync()
        {
            return await db.SaveChangesAsync();
        }
    }
}